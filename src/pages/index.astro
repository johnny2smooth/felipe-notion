---
import dotenv from "dotenv";
import { Client } from "@notionhq/client";
import Layout from "../layouts/Layout.astro";
import Nav from "../components/Nav.astro";

dotenv.config();

const notion = new Client({ auth: process.env.NOTION_TOKEN });

const response = await notion.databases.query({
  database_id: "8310cd12974b42989c496f8b4480546e",
});

let [services, about, intro] = response.results;
let titles = response.results.map((block) =>
  block.properties.Name.type === "title"
    ? block.properties.Name.title[0].plain_text
    : "Missing Title"
);

const servicesBlock = await notion.blocks.children.list({
  block_id: services.id,
});
---

<Layout title="Welcome to Astro.">
  <Nav titles={titles} />
  <main class="stack">
    <h1>Felipe <span class="text-gradient">Matamala</span></h1>

    {
      servicesBlock.results.map((block) => {
        if (block.type === "paragraph") {
          if (block.paragraph.rich_text.length === 0) return;
          return (
            <p class="text-lg">{block.paragraph.rich_text[0].plain_text}</p>
          );
        } else if (block.type === "heading_2") {
          return (
            <a
              class="hover:underline"
              href={`#${block.heading_2.rich_text[0].plain_text.toLowerCase()}`}
              id={block.heading_2.rich_text[0].plain_text.toLowerCase()}
            >
              <h2 class="text-2xl font-bold">
                {block.heading_2.rich_text[0].plain_text}
              </h2>
            </a>
          );
        } else
          return (
            <p>John needs to figure out how to parse this type: {block.type}</p>
          );
      })
    }
  </main>
</Layout>

<style>
  main {
    margin: auto;
    padding: 1.5rem;
    max-width: 60ch;
  }
  h1 {
    font-size: 3rem;
    font-weight: 800;
    margin: 0;
  }
  .text-gradient {
    background-image: var(--accent-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 400%;
    background-position: 0%;
  }
  .instructions {
    line-height: 1.6;
    margin: 1rem 0;
    border: 1px solid rgba(var(--accent), 25%);
    background-color: white;
    padding: 1rem;
    border-radius: 0.4rem;
  }
  .instructions code {
    font-size: 0.875em;
    font-weight: bold;
    background: rgba(var(--accent), 12%);
    color: rgb(var(--accent));
    border-radius: 4px;
    padding: 0.3em 0.45em;
  }
  .instructions strong {
    color: rgb(var(--accent));
  }
  .link-card-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
    gap: 1rem;
    padding: 0;
  }
</style>
